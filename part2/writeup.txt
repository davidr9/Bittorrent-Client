Group Members:
Rosheen Chaudhry 140004499
David Rubin 138008000
Julie Duncan 132001134

Phase 2 Bittorrent Client Write-Up
    Our program decodes and parses the torrent file into a TorrentInfo Object in. Once we obtain the torrent, we are able to create a URL and send an HTTP Get request to the tracker. After obtaining the bencoded tracker response, we create a TrackerResponseInfo object that decodes the bencoded tracker response. We use the tracker's response to obtain a list of peers that we can connect to.

    We find every valid peer and create a thread for that peer. As a result, we send a handshake to all the peers concurrently. After the handshake was successfully obtained and verified, we begin sending the necessary messages to obtain pieces of the file. Initially, we send an interested message and obtain the bitfield message. We use the bitfield message to determine which pieces each peer contains. We then wait for the peer to respond with an unchoke message. After the peer is unchoked, we begin to request blocks from the peers. We created a Piece class that houses all the blocks in a piece. This class combines, orders, and verifies all the blocks that make up the Piece. After we download all the pieces, we close all the threads. After closing the threads, we write the pieces to the disc and obtain a .mp4 file. This file is the song "Never Gonna Give You Up" by Rick Astley.
    
    Our main class, RUBTClient, is responsible for obtaining the torrent information, contacting the tracker (periodically), finding a thread for every valid peer, writing to disk, and running its own thread to wait for user input in order to exit and save the state of the program. It also provides conversion methods for converting SHA-1 to URL and converting a byte array from a btfield message. The most important global fields are an array list of verfied pieces, an object to hold all the torrent info, and fields to maintain the status of the download. Our Peer class is responsible for starting/running each peer thread, opening TCP sockets, properly interacting with the peers by means of sending and receiving messages, and downloading the file. Our Message class is used to create or decode all messages that are written or received, using writeMessage() and readMessage() respectively. There are also a few classes that extend the message class which are useful for specific types of messages. These include PieceMessage, RequestMessage, HaveMessage, and Bitfield Message.Our Piece class allows us to create a piece given its zero-based index within the file, while maintaining the order of the pieces (and blocks within them) and verifying their SHA-1 hashes with the ones expected based on the tracker's repsonse. Our TrackerResponseInfo class is used to maintain the data received from the tracker. In particular, it is most useful for creating a list of peers for the client to use. The remaining classes (TorrentInfo, ToolKit, Bencoder2, BencodingException) were given to us as useful tools for maintaing torrent info and bencoding.

