David Rubin 138008000
Julie Duncan 132001134
Rosheen Chaudhry 140004499

Phase 3 Bittorrent Client Writeup

Here is a link to our project on Github: https://github.com/davidrubin9/Internet-Technology

Our bittorrent client creates a torrentGUI object that is the interface for the program. Our GUI creates multiple fields and buttons. "Start" begins the program, "Stop" ends the download by disconnecting from all peers and writing to disk without stopping the program, and "Clear" refreshes the data entries in the windows. In order to stop the program, the user must press "x." 

Once start is pressed, our program decodes and parses the torrent file and obtains the necessary information to communicate with the tracker. Once we communicate with the tracker we obtain the bencoded list of peers with parts of the file and decode it. Next, we connect to all the peers and initiate a handshake with all of them. Next, we open a DataStream and send an interested message to the peers. We then wait for the peers to unchoke us and begin downloading from the peers. At the same time, we wait for interested messages from the peers and allow them to download any pieces that we have. After all the pieces have been downloaded, we write all the pieces to a file and then we write the file to the disk. 

Our main class, RUBTClient, is responsible for obtaining the torrent information, contacting the tracker (periodically), finding a thread for every valid peer, and writing to disk. It also provides conversion methods for converting SHA-1 to URL and converting a byte array from a btfield message. The most important global fields are an array list of verfied pieces, an object to hold all the torrent info, and fields to maintain the status of the download. Our torrentGUI class is responsible for creating the GUI and handling the events for each button (start, stop, clear). It also displays updated information on the amount downloaded, the number of peers connected, the maximum download speed, and a progress bar. We instantiate this class at the very beginning of RUBTClient. Our Peer class is responsible for starting/running each peer thread, opening TCP sockets, properly interacting with the peers by means of sending and receiving messages, and downloading the file. Our Message class is used to create or decode all messages that are written or received, using writeMessage() and readMessage() respectively. There are also a few classes that extend the message class which are useful for specific types of messages. These include PieceMessage, RequestMessage, HaveMessage, and Bitfield Message. Our Piece class allows us to create a piece given its zero-based index within the file, while maintaining the order of the pieces (and blocks within them) and verifying their SHA-1 hashes with the ones expected based on the tracker's repsonse. Our TrackerResponseInfo class is used to maintain the data received from the tracker. In particular, it is most useful for creating a list of peers for the client to use. The remaining classes (TorrentInfo, ToolKit, Bencoder2, BencodingException) were given to us as useful tools for maintaing torrent info and bencoding.
