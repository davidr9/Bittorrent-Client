David Rubin 138008000
Julie Duncan 132001134
Rosheen Chaudhry 140004499

Phase 3 Bittorrent Client Writeup

Here is a link to our project on Github: https://github.com/davidrubin9/Internet-Technology

Our bittorrent client creates a torrentGUI object that is the interface for the program. Our GUI creates multiple fields and buttons. "Start" begins the program, "Stop" ends the download by disconnecting from all peers and writing to disk without stopping the program, and "Clear" refreshes the data entries in the windows. In order to stop the program, the user must press "x." 

Once start is pressed, our program decodes and parses the torrent file and obtains the necessary information to communicate with the tracker. Once we communicate with the tracker we obtain the bencoded list of peers with parts of the file and decode it. Next, we connect to all the peers and initiate a handshake with all of them. Next, we open a DataStream and send an interested message to the peers. We then wait for the peers to unchoke us and begin downloading from the peers. At the same time, we wait for interested messages from the peers and allow them to download any pieces that we have. After all the pieces have been downloaded, we write all the pieces to a file and then we write the file to the disk. 

We have multiple classes that make up our program. The RUBTClient class takes care of decoding the torrent file, communicating with the tracker/peers, and writing the downloaded file to the disk. The torrentGUI class is responsible for greating the GUI and handle the events for each button. We instantiate this class at the very beginning of RUBTClient. The trackerResponseInfo class takes care of decoding the becoded tracker's response. Our Peer class communicates with all the peers and takes care of uploading/downloading pieces of the file. Our message class stores the different messages from the Peers. We also have several classes that extend the Message class and are used for specific types of messages that include: PieceMessage, RequestMessage, HaveMessage, and Bitfield Message. The last  classes (ToolKit, TorrentInfo, Bencoder2, BencodingException) were given to us in order to debug and decode torrent and tracker responses. 
