
import java.awt.Cursor;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;

/*
 * @author Rosheen C.
 * @author David R.
 * @author Julie D.
 */
public class torrentGUI extends javax.swing.JFrame {

    public boolean programStarted = false;

    static int downloadedPieces = 0;
    /**
     * Creates new form torrentGUI
     */
    public torrentGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        downloadLabel = new javax.swing.JLabel();
        downloadDisplay = new javax.swing.JTextField();
        dlSpeedLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        dlSpeedDisplay = new javax.swing.JTextField();
        timeLabel = new javax.swing.JLabel();
        timeDisplay = new javax.swing.JTextField();
        peerConnectionsLabel = new javax.swing.JLabel();
        peerConnectionsWindow = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startButton.setText("START");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("STOP");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        clearButton.setText("CLEAR");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        downloadLabel.setText("Downloaded:");

        downloadDisplay.setText("0");
        downloadDisplay.setEditable(false);

        dlSpeedLabel.setText("Download Speed: ");

        dlSpeedDisplay.setEditable(false);
        dlSpeedDisplay.setText("0");

        timeLabel.setText("Time:");

        timeDisplay.setEditable(false);
        timeDisplay.setText("0.0");

        peerConnectionsLabel.setText("Peer Connections:");

        peerConnectionsWindow.setEditable(false);
        peerConnectionsWindow.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(downloadLabel)
                            .addComponent(dlSpeedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(peerConnectionsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(downloadDisplay)
                            .addComponent(dlSpeedDisplay)
                            .addComponent(peerConnectionsWindow))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLabel)
                    .addComponent(timeDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startButton))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(downloadLabel)
                    .addComponent(downloadDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(dlSpeedLabel)
                    .addComponent(dlSpeedDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peerConnectionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peerConnectionsWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        progressBar.setMinimum(0);
        if (!programStarted) {
            try {
                RUBTClient.begin();
            } catch (IOException ex) {
                Logger.getLogger(torrentGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NullPointerException ex) {
                Logger.getLogger(torrentGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BencodingException ex) {
                Logger.getLogger(torrentGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(torrentGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            programStarted = true;
            startButton.setEnabled(false);
        }
    }                                           

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (programStarted) {
            for (int i = 0; i < RUBTClient.getConnectedPeers().size(); i++) {
                RUBTClient.getConnectedPeers().get(i).updateStopProgram();
                stopButton.setEnabled(false);
            }
            System.out.println("Total time of download: " + RUBTClient.getDownloadTime() + " ms");
            try {
                RUBTClient.publishToTracker("stopped");
                RUBTClient.writeToDisk(RUBTClient.getfName());
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (UnknownHostException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }                                          

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        downloadDisplay.setText("0");
        timeDisplay.setText("0");

    }                                           

    public static void updateDownload() {
        String display = Integer.toString(RUBTClient.getDownloaded());
        downloadDisplay.setText(display);

    }

    public static void updateTime(double downloadTime) {
        timeDisplay.setText(downloadTime + " s");
    }

    public static void updateProgressBar() {
        progressBar.setMaximum(RUBTClient.getNumPieces());
        progressBar.setValue(RUBTClient.getNumPiecesVerified());
    }

    public static void updateDownloadSpeed() {

    }

    public static void updateConnectedPeers() {
        int peerNum = RUBTClient.getConnectedPeers().size();
        String output = Integer.toString(peerNum);
        peerConnectionsWindow.setText(output);
    }

    /**
     * @param args the command line arguments
     */
    public static void startGUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(torrentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(torrentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(torrentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(torrentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new torrentGUI().setVisible(true);
            }
        });
    }//end of main

    // Variables declaration - do not modify                     
    private javax.swing.JButton clearButton;
    public static javax.swing.JTextField dlSpeedDisplay;
    private javax.swing.JLabel dlSpeedLabel;
    public static javax.swing.JTextField downloadDisplay;
    private javax.swing.JLabel downloadLabel;
    private javax.swing.JLabel peerConnectionsLabel;
    public static javax.swing.JTextField peerConnectionsWindow;
    public static javax.swing.JProgressBar progressBar;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    public static javax.swing.JTextField timeDisplay;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration                   

}
